<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bena的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!--创建bean的三种方式-->
    <!--第一种方式：使用默认构造函数构建。
             在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，
             采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象不能创建
    -->
    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"/>-->

    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）-->
    <!--<bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

    <!--第三种方法：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）-->
<!--
    <bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>
-->
    <!--bean的作用范围
        scope属性(常用单例和多例)
        singleton :单例
        prototype :多例
        request :作用于web应用的请求范围
        session :作用于web应用的会话范围
        global-session :作用于集群环境的会话范围(全局会话范围)，当不是集群环境时，就是session
    -->
    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype"/>-->
    <!--bean对象的生命周期
        单列对象
            出生:当容器创建时对象出生
            活着:只要容器还在，对象一直存活
            死亡:容器销毁，对象消亡
            总结:单例对象的生命周期和容器相同
        多例对象
            出生:当使用对象时spring框架为我们创建
            活着:对象只有在使用中就一直活着
            死亡:当对象长时间不用，且没有别的对象引用时，由java的垃圾回收器回收

    -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"/>
</beans>